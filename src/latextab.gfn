<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="latextab" no-data-ok="true" minver="2021a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.3</version>
<date>2023-02-27</date>
<description>Write matrix as Latex table</description>
<tags>C88</tags>
<help>
This package creates Latex code representing a gretl matrix as a Latex table. The returned tex-file is only a snippet which can be included into an existing Latex document.

In order to work, you need to load the &quot;threeparttable&quot; package when compiling your Latex document by means of:
&quot;\usepackage{threeparttable}&quot;

Please report bugs or comments on the gretl mailing list, write to
atecon@posteo.de or report an issue on github
(https://github.com/atecon/latextab).

You may also want to check out the mat2latex() function from the &quot;extra&quot; addon
which produces a string containing the representation of a matrix as a Latex
tabular environment.

Public function
===============

latextab()
-----------
Pass a matrix and store this as a Latex table in a tex-file.

Parameters:
-----------
mprint   - matrix (r by c)
cnames   - string, space separated string holding column labels
rnames   - string, space separated string holding row labels
capt     - string, string holding the table caption
lab      - string, string holding the table label
note     - string, string holding a note
path     - string, path+file name to store tex-file
dec      - int, number of decimal places to print
fontsize - string, Font size, Use latex-style, e.g. &quot;\small&quot;,
           for default leave empty (&quot;&quot;)

Returns:
--------
Nothing. Instead, a tex file is stored at the given &quot;path&quot;.


Changelog:
==========
v0.3 (February 2023)
  - Update help text
  - Fix typos
v0.22 (May 2017)
  - changed ''outfile @path --write --quiet'' to
    ''outfile &quot;@path&quot; --write --quiet'' to allow for white-spaces in path
v0.21 (April 2016)
  - Add font-size option
v0.2 (Dec. 2015)
  - Add the possibility to determine the number of decimal places
  - Automatic detection NA values (these are ignored)


TODO:
=====
+ Spit out a working self-contained Tex file, either as the string return value or whatever.
+ Improve and simplify the user-interface (make of use of a bundle replacing the numerous variables being required to pass)
</help>
<gretl-function name="latextab" type="void">
 <params count="9">
  <param name="mprint" type="matrix"/>
  <param name="cnames" type="string">
<description>Space sep. string of columns</description>
  </param>
  <param name="rnames" type="string">
<description>Space sep. string of rows</description>
  </param>
  <param name="capt" type="string"/>
  <param name="lab" type="string"/>
  <param name="note" type="string"/>
  <param name="path" type="string"/>
  <param name="dec" type="int" min="0" max="6" default="3"/>
  <param name="fontsize" type="string"/>
 </params>
<code>/* Main function */
string sdec  = sprintf(&quot;%d&quot;, dec)
scalar nc = cols(mprint)
scalar nr = rows(mprint)
catch outfile &quot;@path&quot; --quiet
  printf &quot;\begin{table}[htbp]\n&quot;
  printf &quot;\centering\n&quot;
  printf &quot;%s \n&quot;, fontsize
  if note!=&quot;&quot;
    printf &quot;\begin{threeparttable} \n&quot;
  endif
  printf &quot;\begin{tabular}{l&quot;
  loop i=1..nc -q
    printf &quot;c&quot;
  endloop
  printf &quot;}\n&quot;
  printf &quot;\\toprule\n&quot;
  printf &quot;%s&quot;, strsplit(cnames,1)
  loop i=2..(1+nc) -q
    printf &quot; &amp; %s&quot;, strsplit(cnames,$i)
  endloop
  printf &quot;\\\ \hline\n&quot;
  loop i=1..nr -q
    printf &quot;%s&quot;, strsplit(rnames,$i)
    loop j=1..nc -q
      if isnan(mprint[i,j])
        printf &quot; &amp; &quot;
      else
        printf &quot; &amp; %.@sdecf&quot;, mprint[i,j]
      endif
    endloop
    printf &quot;\\\ \n&quot;
  endloop
  printf &quot;\bottomrule\n&quot;
  printf &quot;\end{tabular}\n&quot;
  if note!=&quot;&quot;
    printf &quot;\begin{tablenotes} \n&quot;
    printf &quot;\footnotesize \n&quot;
    printf &quot;\item \\textsc{Note:} @note \n&quot;
    printf &quot;\end{tablenotes} \n&quot;
    printf &quot;\end{threeparttable} \n&quot;
  endif
  printf &quot;\caption{@capt}\n&quot;
  printf &quot;\label{@lab}\n&quot;
  printf &quot;\end{table}\n&quot;
end outfile
scalar err = $error
if err
  printf &quot;\nERROR: Failed to write tex-file.\n&quot;
else
  printf &quot;\nINFO: Successfully wrote tex-file to '%s'.\n&quot;, path
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off
include latextab.gfn
open denmark.gdt -q

# Compute some stats and add to matrix
matrix mstat = zeros(2, 3)
list ylist = LRM LRY
list dylist = diff(ylist)
loop foreach i dylist
    mstat[i,] = min($i) ~ max($i) ~ mean($i)
endloop

# Specify table strings
string column_labels = &quot;Variable Min Max Mean&quot;
cnameset(mstat, &quot;@column_labels&quot;)
string row_labels = &quot;LRM LRY&quot;
rnameset(mstat, &quot;@row_labels&quot;)
string note = &quot;Add a note&quot;
string path  = sprintf(&quot;%s/ltab.tex&quot;, $workdir)  # SET THE PATH
scalar dec = 3
string fs = &quot;\small&quot;
string label = &quot;&quot;
string caption = &quot;Descriptive Statistics&quot;

# Compile and write the tex-file
latextab(mstat, column_labels, row_labels, caption, label,
         note, path, dec, fs)
</sample-script>
</gretl-function-package>
</gretl-functions>

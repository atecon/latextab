function bundle default_values (void)
    /* Set default values */

    bundle self = null
    strings self.clabels = array(0)
    strings self.rlabels = array(0)
    string self.caption = ""
    string self.label = ""
    string self.note = ""
    string self.filename = ""
    string self.fontsize = ""
    scalar self.asdoc = FALSE
    scalar self.bold_rlabels = FALSE
    scalar self.bold_clabels = TRUE
    scalar self.enforce_decpoint = TRUE
    string self.position = "htbp"

    return self
end function


function void add_digits_vector (bundle *self)
    /* Define number of digits for each column. */

    if !inbundle(self, digits)
        matrix self.digits = 3 * ones(self.ncols)
    endif
end function

function void add_clabels (const matrix mat, bundle *self)
    /* Retrieve eventual column labels from matrix and add to self if
     the user has not passed any labels, yet. */

    strings clabels = cnameget(mat)
    if nelem(clabels) && !nelem(self.clabels)
        if nelem(self.rlabels)
            self.clabels += "Description"  # default column name
        endif
        self.clabels += clabels
    endif
end function

function void add_rlabels (const matrix mat, bundle *self)
    /* Retrieve eventual row labels from matrix and add to self. */

    strings rlabels = rnameget(mat)
    if nelem(rlabels)
        self.rlabels = rlabels
    endif
end function


function string latextab (const matrix mat,
                          const bundle params[null])
    /* Main function.
    returns: A string holding the tex-code. */

    bundle self = default_values()
    if exists(params)
        self = params + self         # override defaults
    endif
    self.ncols = cols(mat)
    self.nrows = rows(mat)
    add_rlabels(mat, &self)
    add_clabels(mat, &self)

    errorif(nelem(self.rlabels) > 0 && (nelem(self.rlabels) != self.nrows),
            "Number of rows must equal number of row labels. Abort.")

    if nelem(self.rlabels)
        errorif((self.ncols + 1) != nelem(self.clabels),
                sprintf("You must add a column label for the first descriptive column as the matrix has row labels. Abort."))
    endif

    add_digits_vector(&self)

    errorif(nelem(self.digits) != self.ncols,
            "Length of vector 'digits' must equal number of columns. Abort.")


    if self.enforce_decpoint
        set force_decpoint on
    endif

    string texcode = compile_texcode(mat, self)

    if self.enforce_decpoint
        set force_decpoint off
    endif

    if nelem(self.filename)
        write_file(texcode, self.filename)
    endif

    return texcode
end function


function void write_file (const string texcode, const string filename)
    /* Actuall writing of tex-code. */

    outfile "@filename"
        printf "%s", texcode
    end outfile
end function


function void write_column_allignment (const bundle self)
    /* Write alignment of columns. Currently all columns are centred except
      the first one, if row labels are given, which is left-sided as it refers
      to some description column. */

    printf "\begin{tabular}{"
    if inbundle(self, "rlabels") && nelem(self.rlabels)
        printf "l"
    endif

    loop i=1..self.ncols
        printf "c"
    endloop
    printf "}\n"
end function


function void write_column_labels (const bundle self)
    /* Write column labels */

    loop i=1..nelem(self.clabels)
        if self.bold_clabels
            printf "\\textbf{%s}", self.clabels[i]
        else
            printf "%s", self.clabels[i]
        endif

        if i < nelem(self.clabels)
            printf " & "
        else
            printf "\n"
        endif
    endloop
end function


function void write_values (const matrix mat, const bundle self)
    /* Write (eventual) row labels and actual values. */

    scalar with_rowlabels = (inbundle(self, "rlabels") && \
                             nelem(self.rlabels)) ? TRUE : FALSE

    loop i=1..rows(mat)
        if with_rowlabels
            if self.bold_rlabels
                printf "\\textbf{%s} & ", self.rlabels[i]
            else
                printf "%s & ", self.rlabels[i]
            endif
        endif

        loop j=1..cols(mat)
            if !ok(mat[i,j])
                if j < cols(mat)
                    printf "& "
                endif
            else
                string dec = sprintf("%d", self.digits[j])
                printf "%.@decf", mat[i,j]
                if j < cols(mat)
                    printf " & "
                endif
            endif
        endloop
        printf " \\\ \n"
    endloop
end function


function void write_note (const bundle self)
    /* Write block for a note. */

    if nelem(self.note)
        printf "\begin{tablenotes} \n"
        printf "\footnotesize \n"
        printf "\item \\textsc{Note:} %s \n", self.note
        printf "\end{tablenotes} \n"
        printf "\end{threeparttable} \n"
    endif
end function


function string compile_texcode (const matrix mat,
                                 const bundle self)
    /* Compilation of tex-code.
       return: string holding tex-code; if an error occurs, abort. */

    string buffer

    catch outfile --buffer=buffer
        print_document_head(self.asdoc)

        printf "\begin{table}[%s]\n", self.position
        printf "\centering\n"
        printf "%s \n", self.fontsize

        if nelem(self.note)
            printf "\begin{threeparttable} \n"
        endif

        write_column_allignment(self)
        printf "\\toprule\n"
        write_column_labels(self)
        printf "\\\ \hline\n"

        write_values(mat, self)

        printf "\bottomrule\n"
        printf "\end{tabular}\n"

        write_note(self)

        printf "\caption{%s}\n", self.caption
        printf "\label{%s}\n", self.label
        printf "\end{table}\n"

        print_document_end(self.asdoc)
    end outfile

    errorif($error, "Failed to write tex-file. Abort")

    return buffer
end function


function void print_document_head (const bool asdoc)
    if asdoc == TRUE
        print "\documentclass{article}"
        print "\usepackage{booktabs}"
        print "\usepackage{threeparttable}"

        print "\begin{document}"
    endif
end function


function void print_document_end (const bool asdoc)
    if asdoc == TRUE
        print "\end{document}"
    endif
end function


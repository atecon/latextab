set verbose off
clear

include assertion.gfn
set assert stop

include "./src/latextab.inp" --force
# include string_utils.gfn


function void test_write_column_allign_clabs (void)
    print "Start testing function write_column_allignment() with column labels"

    # Given
    bundle self = _(rlabels = defarray("A"),
                    ncols = 2)
    string actual

    # When
    string expected = sprintf("\begin{tabular}{lcc}\n")

    outfile --buffer=actual
        write_column_allignment(self)
    end outfile

    # Then
    assert(actual == expected)
end function
test_write_column_allign_clabs()


function void test_write_column_allign (void)
    print "Start testing function write_column_allignment() without column labels"

    # Given
    bundle self = _(ncols = 2)
    string actual

    # When
    string expected = sprintf("\begin{tabular}{cc}\n")

    outfile --buffer=actual
        write_column_allignment(self)
    end outfile

    # Then
    assert(actual == expected)
end function
test_write_column_allign()


function void test_write_column_labels (void)
    print "Start testing function write_column_labels()"

    # Given
    bundle self = _(clabels = defarray("A", "B"),
                    bold_clabels = TRUE)
    string actual

    # When
    string expected = sprintf("\\textbf{A} & \\textbf{B}\n")

    outfile --buffer=actual
        write_column_labels(self)
    end outfile

    # Then
    print actual expected
    assert(actual == expected)
end function
test_write_column_labels()


function void test_write_column_labels_no (void)
    print "Start testing function write_column_labels() with no clabels passed"

    # Given
    bundle self
    strings self.clabels = array(0)
    string actual

    # When
    string expected = ""

    outfile --buffer=actual
        write_column_labels(self)
    end outfile

    # Then
    print actual expected
    assert(actual == expected)
end function
test_write_column_labels_no()


function void test_write_values_no_rlabels (void)
    print "Start testing function write_values() without row labels"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    string actual

    # When
    string expected = sprintf("1.000 & 2.000 \\\ \n3.000 & 4.000 \\\ \n5.000 & 6.000 \\\ \n")
    outfile --buffer=actual
        write_values(mat, self)
    end outfile

    # Then
    assert(expected == actual)
end function
test_write_values_no_rlabels()


function void test_write_file (void)
    print "Start testing function write_file()"

    # Given
    string expected = "some text code"
    string filename = sprintf("%s/foo.tex", $dotdir)

    # When
    write_file(expected, filename)
    string actual = readfile(filename)

    # Then
    assert(actual == expected)
end function
test_write_file()


function void test_compile_texcode_default (void)
    print "Start testing function compile_texcode() with default values"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.ncols = 2

    # When
    string actual = compile_texcode(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_compile_texcode_default()


function void test_comp_texcode_default_doc (void)
    print "Start testing function compile_texcode() with default values but as a working document"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.ncols = 2
    self.todoc = TRUE

    # When
    string actual = compile_texcode(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_comp_texcode_default_doc()


function void test_comp_texcode_clabels_doc (void)
    print "Start testing function compile_texcode() with column labels but as a working document"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.ncols = 2
    self.todoc = TRUE
    self.clabels = defarray("A", "B")

    # When
    string actual = compile_texcode(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_comp_texcode_clabels_doc()


function void test_comp_texcode_crlabels_doc (void)
    print "Start testing function compile_texcode() with column and row labels but as a working document"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.ncols = 2
    self.todoc = TRUE
    self.clabels = defarray("description", "A", "B")
    self.rlabels = defarray("R1", "R2", "R3")

    # When
    string actual = compile_texcode(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_comp_texcode_crlabels_doc()


function void test_comp_texcode_full (void)
    print "Start testing function compile_texcode() using all features available"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.ncols = 2
    self.todoc = TRUE
    self.clabels = defarray("description", "A", "B")
    self.rlabels = defarray("R1", "R2", "R3")
    self.caption = "This is some title"
    self.label = "tab:foo"
    self.note = "Here is some descriptive text of the table"
    self.fontsize = "\small"

    # When
    string actual = compile_texcode(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_comp_texcode_full()


function void test_latextab (void)
    print "Start testing function latextab() using all features available"

    # Given
    matrix mat = {1, 2; 3, 4; 5, 6}
    bundle self = _(digits = 3 * ones(cols(mat), 1))
    self += default_values()
    self.todoc = TRUE
    self.clabels = defarray("description", "A", "B")
    self.rlabels = defarray("R1", "R2", "R3")
    self.bold_rlabels = TRUE
    self.caption = "This is some title"
    self.label = "tab:foo"
    self.note = "Here is some descriptive text of the table"
    self.fontsize = "\small"
    self.digits = {0, 1}
    self.position = "htb"

    # When
    string actual = latextab(mat, self)
    print actual

    # Then
    # TODO: "actual" is not asserted here. Copy and paste it to some tex-doc. instead.
end function
test_latextab()


print "Successfully passed all tests."
quit


